# -*- coding: utf-8 -*-
"""Tugas2_NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SCKPG1iFEKg89OBjNEJuIq0Dqz1thrWH

Import library.
"""

import nltk
nltk.download('punkt')
import operator

"""Import file-file yang akan digunakan, dan menyatukan 20 file menjadi 1 file."""

dt = ['teks1.txt', 'teks2.txt', 'teks3.txt', 'teks4.txt', 'teks5.txt', 'teks6.txt',
      'teks7.txt', 'teks8.txt', 'teks9.txt', 'teks10.txt', 'teks11.txt', 'teks12.txt',
      'teks13.txt', 'teks14.txt', 'teks15.txt', 'teks16.txt', 'teks17.txt', 'teks18.txt',
      'teks19.txt', 'teks20.txt']
      
all = open("all.txt", "a+")
for d in dt:
  with open(d, "r") as data:
    all.write(data.read())
  data.close()

df = open("all.txt", "r").read()

"""Mengubah seluruh karakter kapital menjadi huruf kecil."""

t = df.lower()
t

"""Tokenisasi setiap kalimat, dan menambahkan tag < s> pada awal kalimat serta tag < /s> pada akhir kalimat."""

sent_text = nltk.sent_tokenize(t)

mod_sentences = []
for sentence in sent_text:
  mod_sentence = []
  sent_tokens = nltk.word_tokenize(sentence)
  mod_sentence.append('<s>') #menambahkan tag <s>
  for token in sent_tokens:
    mod_sentence.append(token)
  mod_sentence.append('</s>') #menambahkan tag </s>
  mod_sentences.append(mod_sentence)

print(mod_sentences)

# print(len(mod_sentences))

"""Menghitung frequensi munculnya setiap kata yang ada (unigram)."""

freq_tab = {}
total_count = 0
for sentence in mod_sentences:
  for token in sentence:
    if token in freq_tab:
        freq_tab[token] += 1 # kata sudah ada di dictionary, update frekuensinya
    else:
        freq_tab[token] = 1 # kata belum ada di dictionary 
    total_count += 1
        
print(freq_tab)

"""Menampilkan 10 unigram yang paling sering muncul."""

sorted_u = dict(sorted(freq_tab.items(), key=operator.itemgetter(1),reverse=True)[:10])
print(sorted_u)

"""Menghitung probabilitas munculnya setiap kata (unigram)."""

prob_tab = {}
for sentence in freq_tab:
    prob_tab[sentence] = freq_tab[sentence]/total_count
    
print(prob_tab)
print(len(prob_tab))

"""Menghitung frequensi model bigram."""

freq_bigram_tab = {}
for sentence in mod_sentences:
  for i in range (1, len(sentence)):
    curr_bigram = (sentence[i-1], sentence[i])
    if curr_bigram in freq_bigram_tab:
      freq_bigram_tab[curr_bigram] += 1 # bigram sudah ada di dictionary, update frekuensinya
    else:
      freq_bigram_tab[curr_bigram] = 1 # bigram belum ada di dictionary

print(freq_bigram_tab)

"""Menghitung probabilitas model bigram."""

bigram_prob_tab = {}
for sentence in mod_sentences:
  for i in range (1, len(sentence)):
    curr_bigram = (sentence[i-1], sentence[i])

    if curr_bigram not in bigram_prob_tab:  
      bigram_prob_tab[curr_bigram] = freq_bigram_tab[curr_bigram]/freq_tab[sentence[i-1]]
 
print(bigram_prob_tab)

"""Menampilkan 10 bigram dengan probabilitas tertinggi."""

sorted_b = dict(sorted(bigram_prob_tab.items(), key=operator.itemgetter(1),reverse=True)[:10])
print(sorted_b)

"""**DATA TESTING**

Import file yang berisi data uji. Dan preprocessing data uji.
"""

test = open("test.txt", "r").read()

#lowercasing kalimat
dtest = test.lower()

#tokenisasi kalimat
ttest = nltk.sent_tokenize(dtest)

#loop perkalimat untuk penambahan tag <s> di awal kalimat dan </s> di akhir kalimat
data_tests = [] #list untuk menampung semua kalimat
for sentence in ttest:
  data_test = [] #list untuk menampung perkalimat sebelum diproses
  ttest = nltk.word_tokenize(sentence)
  data_test.append('<s>')
  for token in ttest:
    data_test.append(token)
  data_test.append('</s>')
  data_tests.append(data_test)

print(data_tests)

"""Pengujian Data."""

p = 1
for line in data_tests:
  print(line)
  for i in range(1,len(line)): #looping perkata pada tiap kalimat
    btest = (line[i-1], line[i])
    # print(btest)

    if btest in bigram_prob_tab:
      prob = bigram_prob_tab[btest] #mengambil nilai probabilitas yang ada
      # print(prob)
    else:
      prob = 0
      # print(prob)
    p = prob*p
    # print (p)
  print ('prob : ',p)

"""**LAPLACE SMOOTHING & PERPLEXITY**"""

s = 1
sall = 1
per = 0
for line in data_tests:
  print(line) #print kalimat yang akan di uji
  for i in range(1,len(line)): #looping perkata pada tiap kalimat
    btest = (line[i-1], line[i])
    # print(btest)

    if btest in bigram_prob_tab:
      atas = freq_bigram_tab[btest] + 1 #penambahan jumlah 1 pada pembilang
      bawah = freq_tab[line[i-1]] + len(freq_tab) #penambahan dengan total unigram
      # print(atas)
      # print(bawah)
    else:
      atas = 1 #penambahan jumlah 1 pada pembilang
      bawah = len(freq_tab) #pembagian dengan total unigram

      # print(prob)
    s = atas/bawah
    sall = sall*s #probabilitas setiap kalimat setelah laplace smoothing
    per = (1/sall)**(1/len(line)) #mencari perplexity tiap kalimat
    
  print ('prob smooth : ',sall) #print masing-masing probabilitas dr data uji setelah proses smoothing
  print ('perplexity : ', per) #print masing-masing perplexity
  print ('\n')

freq_trigram = {}
for sentence in mod_sentences:
  for i in range (2, len(sentence)):
    curr_trigram = (sentence[i], sentence[i-2], sentence[i-1])
    if curr_trigram in freq_trigram:
      freq_trigram[curr_trigram] += 1 # trigram sudah ada di dictionary, update frekuensinya
    else:
      freq_trigram[curr_trigram] = 1 # trigram belum ada di dictionary

print(freq_trigram)
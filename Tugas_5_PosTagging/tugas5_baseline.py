# -*- coding: utf-8 -*-
"""Tugas5_Baseline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HxZH3Xy79otwqYsRbCqjTS6XfyRBLnaw
"""

import pandas as pd
import nltk
nltk.download('punkt')

"""Read data latih tsv."""

df = pd.read_csv("train.01.tsv",sep="\t", header=None)

"""Mengambil 50 kalimat pertama beserta tag nya perkata dan menghitung frekuensi kata dan tag."""

count_sentences = 0
tag_count = {}
word_tag_freq = {}

for index, row in df.iterrows():
    word = row[0].lower()
    tag = row[1]
    # print('kata:',word,'tag:', tag)
    # simpan di dictionary kata,tag
    key = (word,tag) 
    # print(key)
    # print(word,tag)
    if count_sentences < 50:
      # simpan di dictionary tag
      if tag in tag_count:  
          tag_count[tag] = tag_count[tag] + 1
      else:
          tag_count[tag] = 1
          
      if key in word_tag_freq:
          word_tag_freq[key] = word_tag_freq[key] + 1
      else:
          word_tag_freq[key] = 1

    if word == '.' :
      count_sentences += 1      

    if count_sentences == 50:
      break

"""Menampilkan frekuensi kata dan tag yang muncul"""

print(word_tag_freq)

"""Menampilkan jumlah tag yang muncul."""

print(tag_count)

"""Fungsi untuk mengetahui tag yang paling sering muncul di data latih."""

def get_most_freq_tag():
    most_freq_tag = max(tag_count, key=tag_count.get) 
    return most_freq_tag

default_tag = get_most_freq_tag()
print('Tag yang paling sering muncul :',default_tag)

"""Fungsi untuk mencari tag yang paling sering muncul pada sebuah kata."""

def get_most_freq_tag_word(word):
    word_tags = {k: v for k, v in word_tag_freq.items() if word in k}
    sorted_word_tags = sorted(word_tags.items(), key=lambda x: x[1], reverse=True)
    if len(sorted_word_tags)>0:
        return sorted_word_tags[0]
    else:
        return None

#word_tags = get_most_freq_tag_word('sekali')
word_tags = get_most_freq_tag_word('bisa')
if word_tags:
    print('informasi tentang tag kata yang paling sering muncul')
    print('kata:',word_tags[0][0],', tag:',word_tags[0][1],', frekuensi:',word_tags[1])
else:
    print('kata tidak ditemukan di data latih')

"""Tes pada kalimat uji."""

du = pd.read_csv("test_sentences.tsv",sep="\t", header=None)
du = du.astype(str)

data_uji = []
tmp = []
tag_uji = []
sentences = []

for index, row in du.iterrows():
    kata = row[0].lower()
    tagg = row[1]
    # print(tagg)
    keyy = (kata,tagg) 
    # print(keyy)   
    if word != 'nan':
      data_uji.append(kata)
      tmp.append(kata)
      tag_uji.append(tagg)
      if kata == '.':
        sentences.append(' '.join(tmp))
        tmp = []

sentences

from nltk.tokenize import word_tokenize
tag_hasil = []

for token in data_uji:
  most_freq_tag_token = get_most_freq_tag_word(token.lower())
  if most_freq_tag_token:
      # kata terdapat di data latih
      print('kata:',token,', tag:',most_freq_tag_token[0][1])
      tag_hasil.append(most_freq_tag_token[0][1])
  else:
      # kata tidak terdapat di data latih
      print('kata:',token,', tidak terdapat di data latih, tag:',get_most_freq_tag())
      tag_hasil.append(get_most_freq_tag())

tag_hasil

count = 0
for i in range(len(tag_hasil)):
  if tag_uji[i] == tag_hasil[i]:
    count += 1
  else:
    count += 0
akurasi = count/len(tag_hasil)
print("Nilai akurasi baseline : ",round(akurasi,4))


# -*- coding: utf-8 -*-
"""tugas_14_question_type_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jhwS6IGvJxukq7r8I0QbqTv5rVNfPnKU

**Tutorial Question Type Detection / Classification**

Mendeteksi tipe pertanyaan, bagian dari tahapan *question processing*

Referensi:  Learning Question Classifiers, Xin Li, Dan Roth. COLING'02, Aug., 2002

Dataset yang digunakan: training_set_1, https://cogcomp.seas.upenn.edu/Data/QA/QC/

Import library yang diperlukan untuk klasifikasi teks
"""

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report

"""Baca file yang berisi dataset pertanyaan/question yang berisi informasi tipe/label question"""

file = open('train_1000.label', 'r', encoding = "ISO-8859-1") 
lines = file.readlines()

"""Coba print question dan label pertama di dataset"""

print(lines[0])

"""Periksa jumlah total question"""

print(len(lines))

"""Proses dataset, pisahkan label tipe question dan question. Pada tutorial ini, identifikasi tipe hanya dilakukan pada level tipe yang lebih general. Deskripsi lengkap tipe question silakan dibaca di paper referensi."""

labels = []
questions = []
for line in lines:
    tokens = line.split()
    current_label = tokens[0].split(':')[0]
    current_question = line[len(tokens[0])+1:]
    if (("Who" or "Whom" or "Whose") in current_question):
      current_label = "HUM"
    elif (("How much" or "How many") in current_question):
      current_label = "NUM"
    elif (("abbreviation" or "stands for") in current_question):
      current_label = "ABBR"
    elif ("Where" in current_question):
      current_label = "LOC"
    

    labels.append(current_label)
    #'Path=helloworld'.removeprefix('Path=')
    # current_question = line[len(tokens[0])+1:]
    questions.append(current_question)

"""Cek label question pertama"""

print(labels[0])

"""Cek question pertama"""

print(questions[0])

"""Split menjadi data train dan data test, 80:20"""

X_train = questions[0:800]
y_train = labels[0:800]
X_test = questions[800:1000]
y_test = labels[800:1000]

print(len(X_train))

"""Ubah representasi teks ke vektor count"""

cv = CountVectorizer(analyzer='word') 
X_train_cv = cv.fit_transform(X_train)

X_test_cv = cv.transform(X_test)

print(X_train[0])

"""Contoh representasi vektor question pertama"""

print(X_train_cv[0])

"""Train classifier Multinomial Naive Bayes"""

clf = MultinomialNB()
clf.fit(X_train_cv, y_train)

"""Lakukan prediksi tipe question data tes"""

y_predict = clf.predict(X_test_cv)

"""Representasi vektor data tes pertama"""

print(X_test_cv[0])

"""Question pertama pada data tes"""

print(X_test[0])

"""Tipe question hasil prediksi question pertama"""

print(y_predict[0])

"""Tipe question pertama sebenarnya"""

print(y_test[0])

"""Kinerja klasifikasi (deteksi tipe question) pada data tes"""

print(classification_report(y_test, y_predict))
# -*- coding: utf-8 -*-
"""Tugas_6_Const_Parsing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ytDvo3EF40oHfj_V-NhRUNQ16x6IcimR

Import library yang dibutuhkan.
"""

import nltk
from nltk.parse.generate import generate
from nltk.parse import ViterbiParser

"""# **Bagian I**

**Nomor 1.** Pendefinisian grammar CFG.
"""

grammar_1 = nltk.CFG.fromstring("""
  S -> NP VP
  VP -> V NP | V NP PP
  PP -> P NP
  V -> "makan" | "pergi" | "beli"
  NP -> "Saya" | "Ayah" | "Ibu" | Det N | Det N PP
  Det -> "sebuah" | "ke" | "seikat"
  N -> "roti" | "Jakarta" | "Taman" | "sayur"
  P -> "di" | "dengan" | "dan"
  """)

"""**Nomor 2.** Pendefinisian contoh kalimat, baik yang mengandung ambiguitas maupun tidak."""

sent_1 = 'Ayah pergi ke Jakarta dengan Ibu'.split() #mengandung ambiguitas
sent_2 = 'Saya makan sebuah roti'.split()
sent_3 = 'Ibu beli seikat sayur dan sebuah ayam'.split() #mengandung ambiguitas

"""Parsing dengan parser Top Down Chart."""

td_parser = nltk.parse.TopDownChartParser(grammar_1)

print('Kalimat 1')
for tree in td_parser.parse(sent_1):
    print(tree)

print('\nKalimat 2')
for treee in td_parser.parse(sent_2):
    print(treee)

print('\nKalimat 3')
for treeee in td_parser.parse(sent_3):
    print(treeee)

"""Parsing dengan parser Bottom Up Chart."""

bu_parser = nltk.parse.BottomUpChartParser(grammar_1)

print('Kalimat 1')
for tree in bu_parser.parse(sent_1):
    print(tree)

print('\nKalimat 2')
for tree in bu_parser.parse(sent_2):
    print(tree)

print('\nKalimat 3')
for tree in bu_parser.parse(sent_3):
    print(tree)

"""Parsing dengan Shift Reduce parser."""

sr_parser = nltk.ShiftReduceParser(grammar_1, trace=2)

print('Kalimat 1')
for tree in sr_parser.parse(sent_1):
    print(tree)

print('\nKalimat 2')
for tree in sr_parser.parse(sent_2):
    print(tree)

print('\nKalimat 3')
for tree in sr_parser.parse(sent_3):
    print(tree)

"""**Nomor 3.** Periksa apakah grammar memenuhi syarat CNF."""

print(grammar_1.is_chomsky_normal_form())

"""**Nomor 4.** Ubah grammar menjadi CNF.

Karna grammar tidak memenuhi syarat CNF, ubah grammar agar memenuhi syarat.
"""

grammar_CNF = nltk.CFG.fromstring("""
  S -> NP VP
  VP -> V NP 
  PP -> P NP
  V -> "makan" | "pergi" | "beli"
  NP -> "Saya" | "Ayah" | "Ibu" | Det N
  Det -> "sebuah" | "ke"
  N -> "roti" | "sayur" | "jakarta" | "taman" | "ayam"
  P -> "di" | "dengan" | "dan"
  """)
print(grammar_CNF.is_chomsky_normal_form())

"""# **Bagian II**

Generate grammar dari file constituency treebank.
"""

from nltk.corpus import BracketParseCorpusReader

ptb = BracketParseCorpusReader(r"", r".*/*\.mrg")

print(ptb)
print(ptb.sents())
print(ptb.parsed_sents())

"""Induksi PCFG (Probabilistic Context-Free Grammar dari constituency treebank."""

from nltk import Nonterminal, nonterminals, Production, PCFG, induce_pcfg

S = Nonterminal('S')

productions = []
for t in ptb.parsed_sents():
    productions += t.productions()
grammar_3 = induce_pcfg(S, productions)
print(grammar_3)

"""Coba tes parse sebuah kalimat dengan grammar hasil induksi"""

#dari kalimat yang ada di constituency Treebank
sent_4 = 'ribuan monyet amankan pesta'.split()
# contoh menggunakan bottom-up parser
bu_parser = nltk.parse.BottomUpChartParser(grammar_3)

for tree in bu_parser.parse(sent_4):
    print(tree)

#kalimat di luar contoh yang ada di constituency Treebank
sent_5 = 'sebagian hewan India ditempatkan pemerintah di negara bagian'.split()
# contoh menggunakan bottom-up parser
bu_parser = nltk.parse.BottomUpChartParser(grammar_3)

for tree in bu_parser.parse(sent_5):
    print(tree)

"""Tes parsing dengan Viterbi Parser, yang akan mengembalikan 1 pohon parse dengan probability total paling tinggi"""

from nltk.parse import ViterbiParser

parser = ViterbiParser(grammar_3, trace=2)
for t in parser.parse(sent_4):
    t.pretty_print()

parser = ViterbiParser(grammar_3, trace=2)
for t in parser.parse(sent_5):
    t.pretty_print()